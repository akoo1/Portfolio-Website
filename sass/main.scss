
@import url('https://fonts.googleapis.com/css?family=Poppins:200,300,400,500,600,700,800,900&display=swap');

@import "./abstracts/variables";
@import "./abstracts/mixins";

@import "./base/base";

@import "./components/buttons";
@import "./components/hamburger";
@import "./components/skills_card";
@import "./components/project_card";

@import "./layout/grid";
@import "./layout/header";
@import "./layout/banner";
@import "./layout/about_me";
@import "./layout/skills";
@import "./layout/projects";
@import "./layout/contact";
@import "./layout/footer";
@import "./layout/footer";






// Good CSS architecture and design pattern

// Follow the BEM (Block Element Modifier) methodology for naming convention

// - Break CSS code down into 4 categories: base, layout, components, and state.
// - Assume as little HTML structure as possible.
// - Don't modify elements based on their parent elements, treat them as independent components,
//   those elements should look as theyâ€™re defined regardless of where they appear in the HTML.
// - The CSS defines what your components look like, and the HTML assigns those looks to the elements on the page,
//   declaring exactly what you want in the HTML.
// - The less the CSS needs to know about the HTML structure the better.(little CSS selector nesting)  
// - Overly generic class names lead to very unpredictable CSS.
// - Separate styling properties from positioning properties.  